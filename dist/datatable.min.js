
function getActionObject(element) {
  var action = element.getAttribute('action');
  var parts = action.split('.');
  var Model = parts[0];
  var actionObject = null;
  if (parts[1] === undefined) {
    actionObject = window[Model];
  } else {
    var searchAction = parts[1];
    try {
      actionObject = window[Model][searchAction].bind(window[Model]);
    } catch (e) {}
  }

  if (actionObject === undefined) {
    throw new Error('Bunny Error: Model search action specified in action="' + action + '" attribute not found');
  }
  return actionObject;
}

function initObjectExtensions(obj, arg) {
  var keys = Object.keys(obj);
  keys.forEach(function (key) {
    if (key.indexOf('init') === 0) {
      obj[key](arg);
    }
  });
}

function pushToElementProperty(element, property, value) {
  if (element[property] === undefined) {
    element[property] = [];
  }
  element[property].push(value);
}

function pushCallbackToElement(element, namespace, callback) {
  pushToElementProperty(element, '__bunny_' + namespace + '_callbacks', callback);
}

function callElementCallbacks(element, namespace, cb) {
  var callbacks = element['__bunny_' + namespace + '_callbacks'];
  if (callbacks !== undefined) {

    // process each promise in direct order
    // if promise returns false, do not execute further promises
    var checkPromise = function checkPromise(index) {
      var res = cb(callbacks[index]); // actually calling callback
      if (res instanceof Promise) {
        res.then(function (cbRes) {
          if (cbRes !== false) {
            // keep going
            if (index > 0) {
              checkPromise(index - 1);
            }
          }
        });
      } else {
        if (res !== false) {
          // keep going
          if (index > 0) {
            checkPromise(index - 1);
          }
        }
      }
    };

    checkPromise(callbacks.length - 1);
  }
}

var DataTableConfig = {
  tagName: 'datatable',
  attrUrl: 'url',
  attrTemplate: 'template',

  tagNamePagination: 'pagination',
  tagNameStats: 'stats',

  classNameAsc: 'arrow-down',
  classNameDesc: 'arrow-up',

  perPage: 15,
  paginationLimit: 7,

  ajaxHeaders: []
};

var DataTableUI = {

  Config: DataTableConfig,
  Template: Template,

  getSearchInput: function getSearchInput(datatable, name) {
    return datatable.querySelector('[name="' + name + '"]') || false;
  },
  getColumn: function getColumn(datatable, name) {
    return this.getTable(datatable).querySelector('[pid="' + name + '"]') || false;
  },
  getAllSearchInputs: function getAllSearchInputs(datatable) {
    return datatable.querySelectorAll('input, select');
  },
  getTable: function getTable(datatable) {
    return datatable.getElementsByTagName('table')[0];
  },
  getOrderCells: function getOrderCells(datatable) {
    return datatable.querySelectorAll('th[pid]');
  },
  getPagination: function getPagination(datatable) {
    return datatable.getElementsByTagName(this.Config.tagNamePagination)[0];
  },
  getStats: function getStats(datatable) {
    return datatable.getElementsByTagName(this.Config.tagNameStats)[0];
  },
  removeRows: function removeRows(datatable) {
    var table = this.getTable(datatable);
    var rowCount = table.rows.length;
    for (var i = rowCount - 1; i > 0; i--) {
      table.deleteRow(i);
    }
  },
  insertRows: function insertRows(datatable, rowsData, templateId) {
    var tpl = document.getElementById(templateId);
    if (tpl.tagName === 'TEMPLATE') {
      this.getTable(datatable).appendChild(parseTemplate(templateId, rowsData));
    } else {
      this.Template.insertAll(templateId, rowsData, this.getTable(datatable));
    }
  },
  clearAllColumnsOrder: function clearAllColumnsOrder(thCell) {
    var _this = this;

    var thCells = thCell.parentNode.querySelectorAll('th');
    [].forEach.call(thCells, function (cell) {
      cell.classList.remove(_this.Config.classNameAsc);
      cell.classList.remove(_this.Config.classNameDesc);
    });
  },
  setColumnAsc: function setColumnAsc(thCell) {
    this.clearAllColumnsOrder(thCell);
    thCell.classList.add(this.Config.classNameAsc);
  },
  setColumnDesc: function setColumnDesc(thCell) {
    this.clearAllColumnsOrder(thCell);
    thCell.classList.add(this.Config.classNameDesc);
  },
  isColumnAsc: function isColumnAsc(thCell) {
    return thCell.classList.contains(this.Config.classNameAsc);
  },
  isColumnDesc: function isColumnDesc(thCell) {
    return thCell.classList.contains(this.Config.classNameDesc);
  }
};

var DataTable = {

  Config: DataTableConfig,
  UI: DataTableUI,

  Ajax: Ajax,
  Pagination: Pagination,

  init: function init(datatable) {
    if (datatable.__bunny_datatable === undefined) {
      datatable.__bunny_datatable = {};
    } else {
      return false;
    }

    var page = BunnyURL.getParam('page');
    if (page === undefined) {
      page = 1;
    }

    this.addEvents(datatable);

    initObjectExtensions(this, datatable);

    var orderData = this.getOrderDataFromURL(datatable);
    if (orderData['order_by'] !== undefined) {
      var thCell = this.UI.getColumn(datatable, orderData['order_by']);
      if (orderData['order_rule'] === 'asc') {
        this.UI.setColumnAsc(thCell);
      } else {
        this.UI.setColumnDesc(thCell);
      }
    }

    this.setARIA(datatable);

    this.changePage(datatable, page, this.getSearchAndOrderDataFromURL(datatable));

    return true;
  },
  initAll: function initAll() {
    var _this2 = this;

    ready(function () {
      [].forEach.call(document.getElementsByTagName(_this2.Config.tagName), function (datatable) {
        _this2.init(datatable);
      });
    });
  },
  isInitiated: function isInitiated(datatable) {
    return datatable.__bunny_datatable !== undefined;
  },
  getTemplateId: function getTemplateId(datatable) {
    return datatable.getAttribute(this.Config.attrTemplate);
  },
  getAjaxUrl: function getAjaxUrl(datatable) {
    return datatable.getAttribute(this.Config.attrUrl);
  },
  getAjaxHeaders: function getAjaxHeaders() {
    var headers = {};
    DataTableConfig.ajaxHeaders.forEach(function (header) {
      var parts = header.split(': ');
      headers[parts[0]] = parts[1];
    });
    return headers;
  },
  addAjaxHeader: function addAjaxHeader(header) {
    this.Config.ajaxHeaders.push(header);
  },
  getSearchData: function getSearchData(datatable) {
    var searchInputs = this.UI.getAllSearchInputs(datatable);
    var data = {};
    [].forEach.call(searchInputs, function (searchInput) {
      if (searchInput && searchInput.value.length > 0) {
        data[searchInput.name] = searchInput.value;
      }
    });
    return data;
  },
  getSearchDataFromURL: function getSearchDataFromURL(datatable) {
    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.href;

    var urlParams = BunnyURL.getParams(url);
    var data = {};
    for (var k in urlParams) {
      if (k !== 'page') {
        var input = this.UI.getSearchInput(datatable, k);
        if (input) {
          input.value = urlParams[k];
          data[k] = urlParams[k];
        }
      }
    }
    return data;
  },
  getOrderData: function getOrderData(datatable) {
    var data = {};
    var thCells = this.UI.getOrderCells(datatable);
    for (var k = 0; k < thCells.length; k++) {
      var thCell = thCells[k];
      if (this.UI.isColumnAsc(thCell)) {
        data['order_by'] = thCell.getAttribute('pid');
        data['order_rule'] = 'asc';
        break;
      } else if (this.UI.isColumnDesc(thCell)) {
        data['order_by'] = thCell.getAttribute('pid');
        data['order_rule'] = 'desc';
        break;
      }
    }
    return data;
  },
  getOrderDataFromURL: function getOrderDataFromURL(datatable) {
    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.href;

    var urlParam = BunnyURL.getParam('order_by', url);
    var data = {};
    if (urlParam) {
      data['order_by'] = urlParam;
      data['order_rule'] = BunnyURL.getParam('order_rule', url);
    }
    return data;
  },
  getSearchAndOrderData: function getSearchAndOrderData(datatable) {
    return Object.assign(this.getSearchData(datatable), this.getOrderData(datatable));
  },
  getSearchAndOrderDataFromURL: function getSearchAndOrderDataFromURL(datatable) {
    return Object.assign(this.getSearchDataFromURL(datatable), this.getOrderDataFromURL(datatable));
  },
  getDataUrl: function getDataUrl(datatable, page) {
    var urlParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var url = this.Pagination.addPageParamToUrl(this.getAjaxUrl(datatable), page);
    url = BunnyURL.setParams(urlParams, url);
    return url;
  },
  addEvents: function addEvents(datatable) {
    var _this3 = this;

    var searchInputs = this.UI.getAllSearchInputs(datatable);
    [].forEach.call(searchInputs, function (searchInput) {
      var eventName = searchInput.tagName === 'INPUT' ? 'input' : 'change';
      addEventOnce(searchInput, eventName, function () {
        _this3.update(datatable, _this3.getDataUrl(datatable, 1, _this3.getSearchAndOrderData(datatable)));
      });
    });

    var thCells = this.UI.getOrderCells(datatable);
    [].forEach.call(thCells, function (thCell) {
      thCell.addEventListener('click', function () {
        if (_this3.UI.isColumnAsc(thCell)) {
          _this3.UI.setColumnDesc(thCell);
          _this3.update(datatable, _this3.getDataUrl(datatable, _this3.getPage(), _this3.getSearchAndOrderData(datatable)));
        } else if (_this3.UI.isColumnDesc(thCell)) {
          _this3.UI.clearAllColumnsOrder(thCell);
          _this3.update(datatable, _this3.getDataUrl(datatable, _this3.getPage(), _this3.getSearchData(datatable)));
        } else {
          _this3.UI.setColumnAsc(thCell);
          _this3.update(datatable, _this3.getDataUrl(datatable, _this3.getPage(), _this3.getSearchAndOrderData(datatable)));
        }
      });
    });
  },
  setARIA: function setARIA(datatable) {
    var thCells = this.UI.getOrderCells(datatable);
    [].forEach.call(thCells, function (thCell) {
      makeAccessible(thCell);
    });
  },
  attachPaginationEventHandlers: function attachPaginationEventHandlers(datatable) {
    var _this4 = this;

    var pg = this.UI.getPagination(datatable);
    this.Pagination.onItemClick(pg, function (page, url) {
      _this4.changePage(datatable, page);
    });
  },
  callHandlers: function callHandlers(datatable, data) {
    callElementCallbacks(datatable, 'datatable_redraw', function (cb) {
      cb(data);
    });
  },
  callBeforeHandlers: function callBeforeHandlers(datatable, data) {
    callElementCallbacks(datatable, 'datatable_before_redraw', function (cb) {
      cb(data);
    });
  },
  onBeforeRedraw: function onBeforeRedraw(datatable, callback) {
    pushCallbackToElement(datatable, 'datatable_before_redraw', callback);
  },
  onRedraw: function onRedraw(datatable, callback) {
    pushCallbackToElement(datatable, 'datatable_redraw', callback);
  },
  fetchData: function fetchData(datatable, url) {
    var _this5 = this;

    return new Promise(function (callback) {
      _this5.Ajax.get(url, function (data) {
        data = JSON.parse(data);
        callback(data);
      }, {}, _this5.getAjaxHeaders());
    });
  },
  changePage: function changePage(datatable, page) {
    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (data === null) {
      data = this.getSearchAndOrderData(datatable);
    }
    this.update(datatable, this.getDataUrl(datatable, page, data));
  },
  getPage: function getPage() {
    var page = BunnyURL.getParam('page');
    if (page) {
      return page;
    }
    return 1;
  },


  /*search(datatable, param, text) {
    this.update(datatable, this.getDataUrl(datatable, 1, {[param]: text}));
  },*/

  updateURL: function updateURL(datatable, url) {
    var newURL = window.location.href;

    var page = BunnyURL.getParam('page', url);
    if (page > 1) {
      newURL = BunnyURL.setParam('page', page);
    } else if (BunnyURL.hasParam('page', newURL)) {
      newURL = BunnyURL.removeParam('page', newURL);
    }

    var orderBy = BunnyURL.getParam('order_by', url);
    if (orderBy) {
      newURL = BunnyURL.setParam('order_by', orderBy, newURL);
      newURL = BunnyURL.setParam('order_rule', BunnyURL.getParam('order_rule', url), newURL);
    }

    var searchInputs = this.UI.getAllSearchInputs(datatable);
    [].forEach.call(searchInputs, function (searchInput) {
      var searchParam = searchInput.name;
      var search = BunnyURL.getParam(searchParam, url);
      if (search && search !== '') {
        newURL = BunnyURL.setParam(searchParam, search, newURL);
      } else if (BunnyURL.hasParam(searchParam, newURL)) {
        newURL = BunnyURL.removeParam(searchParam, newURL);
      }
    });

    if (newURL !== window.location.href) {
      window.history.replaceState('', '', newURL);
    }
  },
  update: function update(datatable, url) {
    var _this6 = this;

    this.callBeforeHandlers(datatable);
    this.UI.getTable(datatable).classList.remove('in');
    this.fetchData(datatable, url).then(function (data) {
      var pg = _this6.UI.getPagination(datatable);
      var Pagination$$1 = _this6.Pagination;
      Pagination$$1.initOrUpdate(pg, data, _this6.getSearchAndOrderData(datatable));
      _this6.attachPaginationEventHandlers(datatable);
      var stats = _this6.UI.getStats(datatable);
      if (stats !== undefined) {
        stats.textContent = Pagination$$1.getStats(pg);
      }
      _this6.UI.removeRows(datatable);
      _this6.UI.insertRows(datatable, data.data, _this6.getTemplateId(datatable));
      _this6.UI.getTable(datatable).classList.add('in');
      _this6.updateURL(datatable, url);
      _this6.callHandlers(datatable, data);
    });
  }
};

DataTable.initAll();

