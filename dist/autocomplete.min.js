
var AutocompleteConfig = Object.assign({}, DropdownConfig, {

  // override
  useTagNames: true,

  tagName: 'autocomplete',

  // custom
  delay: 200,
  minChar: 2,
  showMark: false,
  allowCustomInput: false,
  classNameNotFound: 'dropdown-header',
  textNotFound: 'No results found'

});

var AutocompleteUI = Object.assign({}, DropdownUI, {

  Config: AutocompleteConfig,

  getInput: function getInput(autocomplete) {
    return autocomplete.querySelector('input:not([type="hidden"])') || false;
  },
  getHiddenInput: function getHiddenInput(autocomplete) {
    return autocomplete.querySelector('input[type="hidden"]') || false;
  },
  getTriggerElement: function getTriggerElement(autocomplete) {
    return this.getInput(autocomplete);
  },
  applyTemplateToMenuItem: function applyTemplateToMenuItem(item, data, templateId) {
    item.appendChild(parseTemplate(templateId, data));
    return item;
  },
  getItemLabel: function getItemLabel(item) {
    var label = item.querySelector('[autocompletelabel') || false;
    if (label) {
      return label.textContent;
    }
    return item.textContent;
  },
  getTemplateSelectLabel: function getTemplateSelectLabel(autocomplete) {
    var label = autocomplete.getAttribute('selectedlabel');
    if (label) {
      return document.getElementById(label);
    }
    return false;
  }
});

var Autocomplete = Object.assign({}, Dropdown, {

  UI: AutocompleteUI,
  Config: AutocompleteConfig,

  // override methods

  init: function init(autocomplete) {
    if (autocomplete.__bunny_autocomplete !== undefined) {
      return false;
    }
    autocomplete.__bunny_autocomplete = {};
    autocomplete.__bunny_autocomplete_state = this.getCurState(autocomplete);
    this._addEvents(autocomplete);
    this._setARIA(autocomplete);

    initObjectExtensions(this, autocomplete);

    return true;
  },
  _setARIA: function _setARIA(autocomplete) {
    Dropdown._setARIA(autocomplete);
    var input = this.UI.getInput(autocomplete);
    input.setAttribute('role', 'combobox');
    input.setAttribute('aria-autocomplete', 'list');
  },
  close: function close(autocomplete) {
    Dropdown.close.call(this, autocomplete);
    this.UI.removeMenuItems(autocomplete);
  },
  _addEvents: function _addEvents(autocomplete) {
    var _this = this;

    var input = this.UI.getInput(autocomplete);
    this._addEventFocus(autocomplete, input);
    this.onItemSelect(autocomplete, function (selectedItem) {
      if (selectedItem === null) {
        _this._selectItem(autocomplete, false);
      } else {
        _this._selectItem(autocomplete, selectedItem);
      }
      //input.focus();
    });
  },


  // config methods

  isCustomValueAllowed: function isCustomValueAllowed(autocomplete) {
    return autocomplete.hasAttribute('custom') || this.Config.allowCustomInput;
  },
  getCustomItemContentsTemplate: function getCustomItemContentsTemplate(autocomplete) {
    return autocomplete.getAttribute('template');
  },
  isMarkDisplayed: function isMarkDisplayed(autocomplete) {
    return autocomplete.hasAttribute('mark') || this.Config.showMark;
  },
  getMinChar: function getMinChar(autocomplete) {
    if (autocomplete.hasAttribute('min')) {
      return autocomplete.getAttribute('min');
    } else {
      return this.Config.minChar;
    }
  },
  isNotFoundDisplayed: function isNotFoundDisplayed(autocomplete) {
    return autocomplete.hasAttribute('shownotfound');
  },


  // events

  _addEventInput: function _addEventInput(autocomplete, input) {
    var _this2 = this;

    autocomplete.__bunny_autocomplete_input = addEventOnce(input, 'input', function () {
      if (input.value.length >= _this2.getMinChar(autocomplete)) {
        _this2.update(autocomplete, input.value);
      } else {
        _this2.close(autocomplete);
      }
    }, this.Config.delay);
  },
  _addEventFocus: function _addEventFocus(autocomplete, input) {
    var _this3 = this;

    input.addEventListener('focus', function () {
      if (autocomplete.__bunny_autocomplete_focus === undefined) {
        autocomplete.__bunny_autocomplete_focus = true;
        autocomplete.__bunny_autocomplete_initial_value = input.value;
        _this3._addEventFocusOut(autocomplete, input);
        _this3._addEventInput(autocomplete, input);

        // make sure if dropdown menu not opened and initiated with .open()
        // that on Enter hit form is not submitted
        autocomplete.__bunny_autocomplete_keydown_closed = addEvent(input, 'keydown', function (e) {
          if (e.keyCode === KEY_SPACE) {
            e.stopPropagation();
          }
          //if (!this.UI.isOpened(autocomplete)) {
          if (e.keyCode === KEY_ENTER /* && this.isStateChanged(autocomplete)*/) {
              e.preventDefault();
              if (input.value.length === 0) {
                _this3.clear(autocomplete);
              } else if (e.target === input && _this3.isCustomValueAllowed(autocomplete)) {
                //console.log('autocomplete custom picked');
                _this3._selectItem(autocomplete, false);
                _this3._callItemSelectCallbacks(autocomplete, null);
              }
            }
          //}
        });
      }
    });
  },
  _addEventFocusOut: function _addEventFocusOut(autocomplete, input) {
    var _this4 = this;

    // if after 300ms on focus out
    // and focus was not switched to menu item via keyboard
    // then if value is empty -> clear values
    // else if custom value not allowed but entered -> restore to previous value
    var k = addEvent(input, 'blur', function () {
      setTimeout(function () {
        if (!_this4.UI.isMenuItem(autocomplete, document.activeElement)) {
          delete autocomplete.__bunny_autocomplete_focus;
          removeEvent(input, 'blur', k);
          removeEvent(input, 'input', autocomplete.__bunny_autocomplete_input);
          delete autocomplete.__bunny_autocomplete_input;
          removeEvent(input, 'keydown', autocomplete.__bunny_autocomplete_keydown_closed);
          delete autocomplete.__bunny_autocomplete_keydown_closed;

          if (input.value.length === 0) {
            _this4.clear(autocomplete);
          } else if (!_this4.isCustomValueAllowed(autocomplete) && _this4.isStateChanged(autocomplete)) {
            _this4.restoreState(autocomplete);
          }
        }
      }, 300);
    });
  },


  // item events

  _addItemEvents: function _addItemEvents(autocomplete, items) {
    // [].forEach.call(items.childNodes, item => {
    //   item.addEventListener('click', () => {
    //     this._callItemSelectCallbacks(autocomplete, item);
    //   })
    // });
  },


  // public methods

  update: function update(autocomplete, search) {
    var _this5 = this;

    callElementCallbacks(autocomplete, 'autocomplete_before_update', function (cb) {
      cb();
    });
    var action = getActionObject(autocomplete);
    action(search).then(function (data) {
      //setTimeout(() => {
      callElementCallbacks(autocomplete, 'autocomplete_update', function (cb) {
        var res = cb(data);
        if (res !== undefined) {
          data = res;
        }
      });
      if (Object.keys(data).length > 0) {
        _this5.close(autocomplete);
        var items = void 0;
        var templateId = _this5.getCustomItemContentsTemplate(autocomplete);
        if (_this5.isMarkDisplayed(autocomplete)) {
          items = _this5.UI.createMenuItems(data, function (item, value, content) {
            if (templateId) {
              item = _this5.UI.applyTemplateToMenuItem(item, data[value], templateId);
            }
            var reg = new RegExp('(' + search + ')', 'ig');
            var html = item.innerHTML.replace(reg, '<mark>$1</mark>');
            item.innerHTML = html;
            return item;
          });
        } else {
          if (templateId) {
            items = _this5.UI.createMenuItems(data, function (item, value, content) {
              return _this5.UI.applyTemplateToMenuItem(item, data[value], templateId);
            });
          } else {
            items = _this5.UI.createMenuItems(data);
          }
        }
        _this5._addItemEvents(autocomplete, items);
        _this5.UI.setMenuItems(autocomplete, items);
        _this5._setARIA(autocomplete);
        _this5.open(autocomplete);
      } else {
        _this5.close(autocomplete);
        if (_this5.isNotFoundDisplayed(autocomplete)) {
          _this5.UI.removeMenuItems(autocomplete);
          _this5.UI.getMenu(autocomplete).appendChild(_this5.createNotFoundElement());
          _this5.open(autocomplete);
        }
      }
      //}, 1000);
    }).catch(function (e) {
      _this5.UI.getMenu(autocomplete).innerHTML = e.message;
      _this5.open(autocomplete);
      callElementCallbacks(autocomplete, 'autocomplete_update', function (cb) {
        cb(false, e);
      });
    });
  },
  createNotFoundElement: function createNotFoundElement() {
    var div = document.createElement('div');
    div.classList.add(this.Config.classNameNotFound);
    div.textContent = this.Config.textNotFound;
    return div;
  },
  onBeforeUpdate: function onBeforeUpdate(autocomplete, cb) {
    pushCallbackToElement(autocomplete, 'autocomplete_before_update', cb);
  },
  onUpdate: function onUpdate(autocomplete, cb) {
    pushCallbackToElement(autocomplete, 'autocomplete_update', cb);
  },
  restoreState: function restoreState(autocomplete) {
    var state = this.getState(autocomplete);
    this.UI.getInput(autocomplete).value = state.label;
    var hiddenInput = this.UI.getHiddenInput(autocomplete);
    if (hiddenInput) {
      hiddenInput.value = state.value;
    }

    var tplLabel = this.UI.getTemplateSelectLabel(autocomplete);
    if (tplLabel) {
      tplLabel.innerHTML = '';
    }

    this.close(autocomplete);
  },
  clear: function clear(autocomplete) {
    var input = this.UI.getInput(autocomplete);
    var hiddenInput = this.UI.getHiddenInput(autocomplete);
    input.value = '';
    if (hiddenInput) {
      hiddenInput.value = '';
    }
    autocomplete.__bunny_autocomplete_state = this.getCurState(autocomplete);
    //this._updateInputValues(autocomplete, false);

    var tplLabel = this.UI.getTemplateSelectLabel(autocomplete);
    if (tplLabel) {
      tplLabel.innerHTML = '';
    }

    this._callItemSelectCallbacks(autocomplete, false);
    this.close(autocomplete);
  },
  getValue: function getValue(autocomplete) {
    var hiddenInput = this.UI.getHiddenInput(autocomplete);
    if (hiddenInput) {
      return hiddenInput.value;
    } else {
      return this.UI.getInput(autocomplete).value;
    }
  },
  getState: function getState(autocomplete) {
    return autocomplete.__bunny_autocomplete_state;
  },
  getCurState: function getCurState(autocomplete) {
    var state = {};
    var input = this.UI.getInput(autocomplete);
    var hiddenInput = this.UI.getHiddenInput(autocomplete);
    state.label = input.value;
    if (hiddenInput) {
      state.value = hiddenInput.value;
    }
    return state;
  },
  isStateChanged: function isStateChanged(autocomplete) {
    return JSON.stringify(this.getState(autocomplete)) !== JSON.stringify(this.getCurState(autocomplete));
  },


  // private methods

  _updateInputValues: function _updateInputValues(autocomplete) {
    var item = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var input = this.UI.getInput(autocomplete);

    if (item !== false) {
      var val = this.UI.getItemLabel(item);
      input.value = val;
      autocomplete.__bunny_autocomplete_initial_value = val;
    } else {
      if (this.isCustomValueAllowed(autocomplete)) {
        autocomplete.__bunny_autocomplete_initial_value = input.value;
      } else {
        input.value = '';
        autocomplete.__bunny_autocomplete_initial_value = '';
      }
    }

    var hiddenInput = this.UI.getHiddenInput(autocomplete);
    if (hiddenInput) {
      if (item !== false) {
        hiddenInput.value = this.UI.getItemValue(item);
      } else {
        if (this.isCustomValueAllowed(autocomplete)) {
          hiddenInput.value = input.value;
        } else {
          hiddenInput.value = '';
        }
      }
    }

    var tplLabel = this.UI.getTemplateSelectLabel(autocomplete);
    if (tplLabel) {
      tplLabel.innerHTML = item === false ? '' : item.innerHTML;
    }

    autocomplete.__bunny_autocomplete_state = this.getCurState(autocomplete);
  },


  /**
   * If item = false, tries to select a custom value;
   * If custom value not allowed restore initial value (previously selected item or input value attribute otherwise)
   *
   * @param {HTMLElement} autocomplete
   * @param {HTMLElement|false} item
   * @private
   */
  _selectItem: function _selectItem(autocomplete) {
    var item = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (item === false && !this.isCustomValueAllowed(autocomplete)) {
      // custom input not allowed, restore to value before input was focused
      this.restoreState(autocomplete);
    } else {
      this._updateInputValues(autocomplete, item);
    }

    this.close(autocomplete);
  }
});

document.addEventListener('DOMContentLoaded', function () {
  Autocomplete.initAll();
});

