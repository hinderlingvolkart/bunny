var TabSectionConfig = {

    tagName: 'tabsection',
    tagNameList: 'tablist',
    tagNameTab: 'tab',
    tagNamePanel: 'tabpanel',

    animate: true,
    animationDelay: 0.15,
    classFade: 'fade',
    classFadeIn: 'active'

};

var TabSectionUI = {

    Config: TabSectionConfig,

    getAllTabSections: function getAllTabSections() {
        var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;

        return node.getElementsByTagName(this.Config.tagName);
    },
    getTabList: function getTabList(tabsection) {
        return tabsection.getElementsByTagName(this.Config.tagNameList)[0] || false;
    },
    getTabs: function getTabs(tablist) {
        return tablist.getElementsByTagName(this.Config.tagNameTab);
    },
    getTabPanels: function getTabPanels(tabsection) {
        return tabsection.getElementsByTagName(this.Config.tagNamePanel);
    },
    getActiveTab: function getActiveTab(tabsection) {
        var tabList = this.getTabList(tabsection);
        var tabs = this.getTabs(tabList);
        for (var k = 0; k < tabs.length; k++) {
            if (tabs[k].hasAttribute('selected')) {
                return tabs[k];
            }
        }
        return false;
    },
    getActiveTabPanel: function getActiveTabPanel(tabsection) {
        var tabpanels = this.getTabPanels(tabsection);
        for (var k = 0; k < tabpanels.length; k++) {
            if (!tabpanels[k].hasAttribute('hidden')) {
                return tabpanels[k];
            }
        }
        return false;
    },
    getTabSectionByTab: function getTabSectionByTab(tab) {
        return tab.parentNode.parentNode;
    },
    getTabSectionByTabPanel: function getTabSectionByTabPanel(tabpanel) {
        return tabpanel.parentNode;
    },
    getTabIndex: function getTabIndex(tab) {
        return [].indexOf.call(tab.parentNode.children, tab);
    },
    getTabPanelIndex: function getTabPanelIndex(tabpanel) {
        var tabsection = this.getTabSectionByTabPanel(tabpanel);
        var tabpanels = this.getTabPanels(tabsection);
        var tabPanelIndex = 0;
        [].forEach.call(tabpanels, function (tp) {
            if (tp === tabpanel) {
                return tabPanelIndex;
            }
            tabPanelIndex++;
        });
        return false;
    },
    getTabPanelByTab: function getTabPanelByTab(tab) {
        var tabIndex = this.getTabIndex(tab);
        var tabsection = this.getTabSectionByTab(tab);
        var tabpanels = this.getTabPanels(tabsection);
        return tabpanels[tabIndex];
    },
    getTabByTabPanel: function getTabByTabPanel(tabpanel) {
        var tabPanelIndex = this.getTabPanelIndex(tabpanel);
        var tabsection = this.getTabSectionByTabPanel(tabpanel);
        var tablist = this.getTabList(tabsection);
        var tabs = this.getTabs(tablist);
        return tabs[tabPanelIndex];
    },
    setTabActive: function setTabActive(tab) {
        tab.setAttribute('selected', '');
    },
    setTabInactive: function setTabInactive(tab) {
        tab.removeAttribute('selected');
    },
    setTabPanelVisible: function setTabPanelVisible(tabpanel) {
        var _this = this;

        return new Promise(function (resolve) {
            if (_this.Config.animate) {
                tabpanel.removeAttribute('hidden');
                tabpanel.classList.add(_this.Config.classFadeIn);
                setTimeout(function () {
                    resolve();
                }, _this.Config.animationDelay * 1000);
            } else {
                tabpanel.removeAttribute('hidden');
                resolve();
            }
        });
    },
    setTabPanelHidden: function setTabPanelHidden(tabpanel) {
        var _this2 = this;

        return new Promise(function (resolve) {
            if (_this2.Config.animate) {
                tabpanel.classList.remove(_this2.Config.classFadeIn);
                setTimeout(function () {
                    tabpanel.setAttribute('hidden', '');
                    resolve();
                }, _this2.Config.animationDelay * 1000);
            } else {
                tabpanel.setAttribute('hidden', '');
                resolve();
            }
        });
    },
    switchTab: function switchTab(tab) {
        var _this3 = this;

        var tabsection = this.getTabSectionByTab(tab);
        var tabpanel = this.getTabPanelByTab(tab);
        var activeTab = this.getActiveTab(tabsection);
        var activeTabPanel = this.getActiveTabPanel(tabsection);

        if (tab !== activeTab) {
            this.setTabInactive(activeTab);
            this.setTabPanelHidden(activeTabPanel).then(function () {
                _this3.setTabActive(tab);
                _this3.setTabPanelVisible(tabpanel);
            });
        }
    },
    switchTabPanel: function switchTabPanel(tabpanel) {
        var _this4 = this;

        var tab = this.getTabByTabPanel(tabpanel);
        var tabsection = this.getTabSectionByTabPanel(tabpanel);
        var activeTab = this.getActiveTab(tabsection);
        var activeTabPanel = this.getActiveTabPanel(tabsection);

        if (tabpanel !== activeTabPanel) {
            this.setTabInactive(activeTab);
            this.setTabPanelHidden(activeTabPanel).then(function () {
                _this4.setTabActive(tab);
                _this4.setTabPanelVisible(tabpanel);
            });
        }
    }
};

var TabSection = {

    Config: TabSectionConfig,
    UI: TabSectionUI,

    init: function init(tabsection) {
        this.addEvents(tabsection);
        if (this.Config.animate) {
            this.initAnimationClass(tabsection);
        }
    },
    initAll: function initAll() {
        var _this5 = this;

        var tabsections = this.UI.getAllTabSections();
        [].forEach.call(tabsections, function (tabsection) {
            _this5.init(tabsection);
        });
    },
    addEvents: function addEvents(tabsection) {
        var _this6 = this;

        var tablist = this.UI.getTabList(tabsection);
        var tabs = this.UI.getTabs(tablist);
        [].forEach.call(tabs, function (tab) {
            tab.addEventListener('click', function () {
                _this6.UI.switchTab(tab);
            });
        });
    },
    initAnimationClass: function initAnimationClass(tabsection) {
        var _this7 = this;

        var tabpanels = this.UI.getTabPanels(tabsection);
        [].forEach.call(tabpanels, function (tabpanel) {
            tabpanel.classList.add(_this7.Config.classFade);
        });
        var actibeTabPanel = this.UI.getActiveTabPanel(tabsection);
        actibeTabPanel.classList.add(this.Config.classFadeIn);
    }
};

document.addEventListener('DOMContentLoaded', function () {
    TabSection.initAll();
});

