var DOMObserver = {
  iterateCallback: function iterateCallback(callbacksConteiner, node) {
    if (node.nodeType === Node.ELEMENT_NODE) {
      callbacksConteiner.forEach(function (cb) {
        if (node.tagName.toLowerCase() === cb[0]) {
          cb[1](node);
        } else {
          var childNodes = node.getElementsByTagName(cb[0]);
          [].forEach.call(childNodes, function (childNode) {
            cb[1](childNode);
          });
        }
      });
    }
  },
  create: function create() {
    var _this = this;

    return new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.addedNodes.length > 0 && document.body.__observer_insert !== undefined) {
          [].forEach.call(mutation.addedNodes, function (addedNode) {
            _this.iterateCallback(document.body.__observer_insert, addedNode);
          });
        }

        if (mutation.removedNodes.length > 0 && document.body.__observer_remove !== undefined) {
          [].forEach.call(mutation.removedNodes, function (removedNode) {
            _this.iterateCallback(document.body.__observer_remove, removedNode);
          });
        }
      });
    });
  },
  createForAttr: function createForAttr(component) {
    return new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.attributeName !== null && component.__observer_attr !== undefined) {
          component.__observer_attr.forEach(function (cb) {
            if (mutation.attributeName === cb[0]) {
              cb[1]();
            }
          });
        }
      });
    });
  },
  init: function init() {
    if (document.body.__observer === undefined) {
      document.body.__observer = this.create();
      this.observe();
    }
  },
  onInsert: function onInsert(tagName, callback) {
    if (document.body.__observer_insert === undefined) {
      document.body.__observer_insert = [];
    }
    document.body.__observer_insert.push([tagName, callback]);
  },
  onRemove: function onRemove(tagName, callback) {
    if (document.body.__observer_remove === undefined) {
      document.body.__observer_remove = [];
    }
    document.body.__observer_remove.push([tagName, callback]);
  },
  onAttributeChange: function onAttributeChange(component, attrName, callback) {
    if (component.__observer_attr === undefined) {
      component.__observer_attr = [];
    }
    component.__observer_attr.push([attrName, callback]);
  },
  observe: function observe() {
    document.body.__observer.observe(document.body, { childList: true, subtree: true });
  },
  observeAttr: function observeAttr(component) {
    component.__observer.observe(component, { attributes: true });
  },
  registerAttribute: function registerAttribute(component, name, defaultValue, onChange) {
    var attrVal = component.getAttribute(name);
    component['_' + name] = attrVal ? attrVal : defaultValue;
    onChange(component['_' + name]);
    Object.defineProperty(component, name, {
      get: function get() {
        return component['_' + name];
      },
      set: function set(val) {
        component['_' + name] = val;
        onChange(val);
      }
    });

    this.onAttributeChange(component, name, function () {
      var val = component.getAttribute(name);
      component['_' + name] = val;
      onChange(val);
    });

    if (component.__observer === undefined) {
      component.__observer = this.createForAttr(component);
      this.observeAttr(component);
    }
  }
};

var Component = {

  tagName: 'component',

  attributes: {},

  /**
   * @returns {Boolean}
   */
  init: function init(component) {
    var _this = this;

    var prop = '__component_' + this.tagName;
    if (component[prop] !== undefined) {
      return false;
    }
    component[prop] = true;

    if (this.role !== undefined) {
      component.setAttribute('role', this.role);
    }

    if (this.tabIndex !== undefined) {
      component.setAttribute('tabIndex', this.tabIndex);
    }

    var _loop = function _loop(attrName) {
      var attrDefVal = _this.attributes[attrName];
      DOMObserver.registerAttribute(component, attrName, attrDefVal, function (newVal) {
        _this['__' + attrName](component, newVal);
      });
    };

    for (var attrName in this.attributes) {
      _loop(attrName);
    }

    if (this.addElements !== undefined) {
      this.addElements(component);
    }

    this.addEvents(component);
    return true;
  },
  addEvents: function addEvents(component) {},
  initAll: function initAll() {
    var _this2 = this;

    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;

    [].forEach.call(this.getAll(container), function (btn) {
      _this2.init(btn);
    });
  },
  getAll: function getAll() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;

    return container.getElementsByTagName(this.tagName);
  },
  register: function register() {
    var _this3 = this;

    document.addEventListener('DOMContentLoaded', function () {
      DOMObserver.init();
      _this3.initAll();
      DOMObserver.onInsert(_this3.tagName, function (component) {
        _this3.init(component);
      });
      if (_this3.uninit !== undefined) {
        DOMObserver.onRemove(_this3.tagName, function (component) {
          _this3.uninit(component);
        });
      }
    });
  }
};

