function getActionObject(element) {
  var action = element.getAttribute('action');
  var parts = action.split('.');
  var Model = parts[0];
  var actionObject = null;
  if (parts[1] === undefined) {
    actionObject = window[Model];
  } else {
    var searchAction = parts[1];
    try {
      actionObject = window[Model][searchAction].bind(window[Model]);
    } catch (e) {}
  }

  if (actionObject === undefined) {
    throw new Error('Bunny Error: Model search action specified in action="' + action + '" attribute not found');
  }
  return actionObject;
}

function initObjectExtensions(obj, arg) {
  var keys = Object.keys(obj);
  keys.forEach(function (key) {
    if (key.indexOf('init') === 0) {
      obj[key](arg);
    }
  });
}

function pushToElementProperty(element, property, value) {
  if (element[property] === undefined) {
    element[property] = [];
  }
  element[property].push(value);
}

function pushCallbackToElement(element, namespace, callback) {
  pushToElementProperty(element, '__bunny_' + namespace + '_callbacks', callback);
}

function callElementCallbacks(element, namespace, cb) {
  var callbacks = element['__bunny_' + namespace + '_callbacks'];
  if (callbacks !== undefined) {

    // process each promise in direct order
    // if promise returns false, do not execute further promises
    var checkPromise = function checkPromise(index) {
      var res = cb(callbacks[index]); // actually calling callback
      if (res instanceof Promise) {
        res.then(function (cbRes) {
          if (cbRes !== false) {
            // keep going
            if (index > 0) {
              checkPromise(index - 1);
            }
          }
        });
      } else {
        if (res !== false) {
          // keep going
          if (index > 0) {
            checkPromise(index - 1);
          }
        }
      }
    };

    checkPromise(callbacks.length - 1);
  }
}

