
var ModalConfig = {

  tagName: 'modal',
  tagNameBackdrop: 'fade',
  tagNameCloser: 'button',
  classNameShow: 'show',
  classNameCloser: 'close',
  classNameSlideOut: 'slide-top',
  classNameSlideIn: 'slide-in-bottom',
  classNameFadeOut: 'fade-out',
  classNameFadeIn: 'fade-in',
  classNameBodyNoScroll: 'no-scroll',
  attrDataTarget: 'data-target'

};

var ModalUI = {

  Config: ModalConfig,

  getAll: function getAll() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;

    return container.getElementsByTagName(this.Config.tagName) || false;
  },
  getCloser: function getCloser(modal) {
    return modal.getElementsByClassName(this.Config.classNameCloser)[0] || false;
  },
  createBackdrop: function createBackdrop() {
    return document.createElement(this.Config.tagNameBackdrop);
  },
  wrapBackdropAroundModal: function wrapBackdropAroundModal(modal) {
    var backdrop = this.createBackdrop();
    backdrop.classList.add(this.Config.classNameFadeIn);
    var parent = modal.parentNode;
    parent.insertBefore(backdrop, modal);
    backdrop.appendChild(modal);
  },
  unwrapBackdropFromModal: function unwrapBackdropFromModal(modal) {
    var backdrop = modal.parentNode;
    backdrop.classList.add(this.Config.classNameFadeOut);
    backdrop.addEventListener('animationend', function () {
      var parent = backdrop.parentNode;
      parent.insertBefore(modal, backdrop);
      parent.removeChild(backdrop);
    });
  },
  getToggleBtn: function getToggleBtn(modal) {
    var id = modal.id;
    if (id) {
      return document.querySelector('[data-target="' + id + '"]') || false;
    }
    return false;
  },
  show: function show(modal, prevFocusedElement) {
    modal.setAttribute('tabindex', 0);
    modal.__prev_focused = prevFocusedElement;
    document.body.classList.add(this.Config.classNameBodyNoScroll);
    modal.classList.add(this.Config.classNameShow);
    modal.classList.add(this.Config.classNameSlideIn);
    this.wrapBackdropAroundModal(modal);
    setTimeout(function () {
      modal.focus();
    }, 0);
  },
  hide: function hide(modal) {
    var _this = this;

    modal.removeAttribute('tabindex');
    modal.__prev_focused.focus();
    delete modal.__prev_focused;
    modal.classList.add(this.Config.classNameSlideOut);
    this.unwrapBackdropFromModal(modal);
    var handler = function handler() {
      modal.classList.remove(_this.Config.classNameShow);
      modal.classList.remove(_this.Config.classNameSlideIn);
      modal.classList.remove(_this.Config.classNameSlideOut);
      document.body.classList.remove(_this.Config.classNameBodyNoScroll);
      modal.removeEventListener('animationend', handler);
    };
    modal.addEventListener('animationend', handler);
  }
};

var Modal = {

  Config: ModalConfig,
  UI: ModalUI,

  init: function init(modal) {
    this.addEvents(modal);
  },
  initAll: function initAll() {
    var _this2 = this;

    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;

    [].forEach.call(this.UI.getAll(container), function (modal) {
      _this2.init(modal);
    });
  },
  addEvents: function addEvents(modal) {
    var btn = this.UI.getToggleBtn(modal);
    if (btn) {
      modal.__click_toggler = addEvent(btn, 'click', this.handlerShow.bind(this, modal));
    }
  },
  handlerShow: function handlerShow(modal, e) {
    var _this3 = this;

    var btn = this.UI.getToggleBtn(modal);
    if (btn) {
      removeEvent(btn, 'click', modal.__click_toggler);
      delete modal.__click_toggler;
    }

    var closer = this.UI.getCloser(modal);
    if (closer) {
      modal.__click_closer = addEvent(closer, 'click', this.handlerHide.bind(this, modal));
    }

    this.UI.show(modal, e.target);

    setTimeout(function () {
      modal.__click_outside = onClickOutside(modal, _this3.handlerHide.bind(_this3, modal));
    }, 100);

    if (modal.__on_show !== undefined) modal.__on_show.forEach(function (cb) {
      return cb();
    });
  },
  handlerHide: function handlerHide(modal) {
    var btn = this.UI.getToggleBtn(modal);
    if (btn) {
      modal.__click_toggler = addEvent(btn, 'click', this.handlerShow.bind(this, modal));
    }

    var closer = this.UI.getCloser(modal);
    if (closer) {
      removeEvent(closer, 'click', modal.__click_closer);
      delete modal.__click_closer;
    }

    this.UI.hide(modal);

    removeClickOutside(modal, modal.__click_outside);
    delete modal.__click_outside;

    if (modal.__on_hide !== undefined) modal.__on_hide.forEach(function (cb) {
      return cb();
    });
  },
  show: function show(modal) {
    this.handlerShow(modal, { target: document.activeElement });
  },
  hide: function hide(modal) {
    this.handlerHide(modal);
  },
  onShow: function onShow(modal, callback) {
    if (modal.__on_show === undefined) modal.__on_show = [];
    modal.__on_show.push(callback);
  },
  onHide: function onHide(modal, callback) {
    if (modal.__on_hide === undefined) modal.__on_hide = [];
    modal.__on_hide.push(callback);
  }
};

document.addEventListener('DOMContentLoaded', function () {
  Modal.initAll();
});

