
var _Pagination;

var PaginationConfig = {

  // HTML tags and attributes
  tagName: 'pagination',
  attrLimit: 'limit',
  attrOuter: 'outer', // boolean attribute - display or not first/last buttons

  tagNameItem: 'li',
  tagNameLink: 'a',
  attrLinkUrl: 'href',

  // default attribute values
  attrLimitDefault: 7,
  attrOuterDefault: false,

  // CSS styling
  classItem: 'page-item',
  classItemDisabled: 'disabled',
  classItemActive: 'active',
  classLink: 'page-link',

  // language strings
  langFirst: 'First',
  langLast: 'Last',
  langPrevious: '< Previous',
  langNext: 'Next >',
  langStats: '{from}-{to} of total {total} (Page {currentPage} of {lastPage})',

  // HTTP GET param names in URL
  paramPage: 'page'

};

var Pagination = (_Pagination = {

  _config: PaginationConfig,

  _collection: [],
  _callbacks: [],
  _dataCollection: [],

  _attachEventHandlers: function _attachEventHandlers(pagination) {
    var _this = this;

    var items = this.getItems(pagination);
    [].forEach.call(items, function (item) {
      //if (!this.isItemActive(item) && !this.isItemDisabled(item)) {
      _this._attachSingleEventHandler(item);
      //}
    });
  },
  _getIndex: function _getIndex(pagination) {
    for (var k = 0; k < this._collection.length; k++) {
      if (this._collection[k] === pagination) {
        return k;
      }
    }
    return false;
  },
  onItemClick: function onItemClick(pagination, callback) {
    var index = this._getIndex(pagination);
    this._callbacks[index].push(callback);
  },
  getPaginationByItem: function getPaginationByItem(item) {
    return item.parentNode;
  },
  _attachSingleEventHandler: function _attachSingleEventHandler(item) {
    var _this2 = this;

    var pagination = this.getPaginationByItem(item);
    var index = this._getIndex(pagination);
    var link = this.getLinkByItem(item);
    var callbacks = this._callbacks[index];
    link.addEventListener('click', function (e) {
      e.preventDefault();
      if (callbacks.length > 0) {
        var url = link.getAttribute('href');
        var page = _this2.getPageFromUrl(url);
        _this2._callbacks[index].forEach(function (callback) {
          callback(page, url);
        });
      }
    });
  },
  getLimit: function getLimit(pagination) {
    var limit = pagination.getAttribute(this._config.attrLimit);
    if (limit === null) {
      limit = this._config.attrLimitDefault;
    }
    return limit;
  },
  isOuter: function isOuter(pagination) {
    var outer = pagination.hasAttribute(this._config.attrOuter);
    if (outer === false) {
      outer = this._config.attrOuterDefault;
    }
    return outer;
  },
  getItems: function getItems(pagination) {
    return pagination.getElementsByClassName(this._config.classItem);
  },
  isItemDisabled: function isItemDisabled(item) {
    return item.classList.contains(this._config.classItemDisabled);
  },
  isItemActive: function isItemActive(item) {
    return item.classList.contains(this._config.classItemActive);
  },
  setItemActive: function setItemActive(item) {
    item.classList.add(this._config.classItemActive);
  }
}, babelHelpers.defineProperty(_Pagination, 'isItemDisabled', function isItemDisabled(item) {
  return item.classList.add(this._config.classItemDisabled);
}), babelHelpers.defineProperty(_Pagination, 'getLinkByItem', function getLinkByItem(item) {
  return item.getElementsByClassName(this._config.classLink)[0];
}), babelHelpers.defineProperty(_Pagination, 'createItem', function createItem(url, text) {
  var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var disabled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var item = document.createElement(this._config.tagNameItem);
  item.classList.add(this._config.classItem);
  if (active) {
    item.classList.add(this._config.classItemActive);
  }
  if (disabled) {
    item.classList.add(this._config.classItemDisabled);
  }
  var link = document.createElement(this._config.tagNameLink);
  link.setAttribute(this._config.attrLinkUrl, url);
  link.classList.add(this._config.classLink);
  link.textContent = text;
  item.appendChild(link);
  return item;
}), babelHelpers.defineProperty(_Pagination, 'createPageItem', function createPageItem(pagination, page) {
  return this.createItem(this.getPageUrl(pagination, page), page, this.isPage(pagination, page));
}), babelHelpers.defineProperty(_Pagination, 'createFirstItem', function createFirstItem(pagination) {
  return this.createItem(this.getFirstPageUrl(pagination), this._config.langFirst, false, this.isFirstPage(pagination));
}), babelHelpers.defineProperty(_Pagination, 'createPrevItem', function createPrevItem(pagination) {
  return this.createItem(this.getPrevPageUrl(pagination), this._config.langPrevious, false, this.isFirstPage(pagination));
}), babelHelpers.defineProperty(_Pagination, 'createNextItem', function createNextItem(pagination) {
  return this.createItem(this.getNextPageUrl(pagination), this._config.langNext, false, this.isLastPage(pagination));
}), babelHelpers.defineProperty(_Pagination, 'createLastItem', function createLastItem(pagination) {
  return this.createItem(this.getLastPageUrl(pagination), this._config.langLast, false, this.isLastPage(pagination));
}), babelHelpers.defineProperty(_Pagination, 'removeItems', function removeItems(pagination) {
  while (pagination.firstChild) {
    pagination.removeChild(pagination.firstChild);
  }
}), babelHelpers.defineProperty(_Pagination, 'getStats', function getStats(pagination) {
  if (!this.hasPages(pagination)) {
    return '';
  }
  var str = this._config.langStats;
  var data = this.getData(pagination);
  for (var key in data) {
    str = str.replace('{' + key + '}', data[key]);
  }
  return str;
}), babelHelpers.defineProperty(_Pagination, '_getPaginationData', function _getPaginationData(data) {
  var urlParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  var nextPageUrl = urlParams === null || data.next_page_url === null ? data.next_page_url : BunnyURL.setParams(urlParams, data.next_page_url);
  var prevPageUrl = urlParams === null || data.prev_page_url === null ? data.prev_page_url : BunnyURL.setParams(urlParams, data.prev_page_url);
  return {
    count: parseInt(data.to) - parseInt(data.from) + 1,
    currentPage: parseInt(data.current_page),
    lastPage: parseInt(data.last_page),
    nextPageUrl: nextPageUrl,
    perPage: parseInt(data.per_page),
    previousPageUrl: prevPageUrl,
    total: parseInt(data.total),
    from: parseInt(data.from),
    to: parseInt(data.to)
  };
}), babelHelpers.defineProperty(_Pagination, 'getData', function getData(pagination) {
  return this._dataCollection[this._getIndex(pagination)];
}), babelHelpers.defineProperty(_Pagination, 'hasPages', function hasPages(pagination) {
  var data = this.getData(pagination);
  return data.total > data.perPage;
}), babelHelpers.defineProperty(_Pagination, 'getCount', function getCount(pagination) {
  return this.getData(pagination).count;
}), babelHelpers.defineProperty(_Pagination, 'getCurrentPage', function getCurrentPage(pagination) {
  return this.getData(pagination).currentPage;
}), babelHelpers.defineProperty(_Pagination, 'getLastPage', function getLastPage(pagination) {
  return this.getData(pagination).lastPage;
}), babelHelpers.defineProperty(_Pagination, 'getPageUrl', function getPageUrl(pagination, page) {
  return this._getUrlForPage(pagination, page);
}), babelHelpers.defineProperty(_Pagination, 'getFirstPageUrl', function getFirstPageUrl(pagination) {
  return this._getUrlForPage(pagination, 1);
}), babelHelpers.defineProperty(_Pagination, 'getLastPageUrl', function getLastPageUrl(pagination) {
  return this._getUrlForPage(pagination, this.getLastPage(pagination));
}), babelHelpers.defineProperty(_Pagination, 'getPrevPageUrl', function getPrevPageUrl(pagination) {
  return this.getData(pagination).previousPageUrl;
}), babelHelpers.defineProperty(_Pagination, 'getNextPageUrl', function getNextPageUrl(pagination) {
  return this.getData(pagination).nextPageUrl;
}), babelHelpers.defineProperty(_Pagination, 'getTotal', function getTotal(pagination) {
  return this.getData(pagination).total;
}), babelHelpers.defineProperty(_Pagination, 'getFrom', function getFrom(pagination) {
  return this.getData(pagination).from;
}), babelHelpers.defineProperty(_Pagination, 'getTo', function getTo(pagination) {
  return this.getData(pagination).to;
}), babelHelpers.defineProperty(_Pagination, 'getPerPage', function getPerPage(pagination) {
  return this.getData(pagination).perPage;
}), babelHelpers.defineProperty(_Pagination, 'isLastPage', function isLastPage(pagination) {
  return this.isPage(pagination, this.getLastPage(pagination));
}), babelHelpers.defineProperty(_Pagination, 'isFirstPage', function isFirstPage(pagination) {
  return this.isPage(pagination, 1);
}), babelHelpers.defineProperty(_Pagination, 'isPage', function isPage(pagination, page) {
  return this.getCurrentPage(pagination) === page;
}), babelHelpers.defineProperty(_Pagination, 'addPageParamToUrl', function addPageParamToUrl(url, page) {
  var sep = url.indexOf('?') === -1 ? '?' : '&';
  return url + sep + this._config.paramPage + '=' + page;
}), babelHelpers.defineProperty(_Pagination, 'getPageFromUrl', function getPageFromUrl(url) {
  return BunnyURL.getParam(this._config.paramPage, url);
}), babelHelpers.defineProperty(_Pagination, '_getUrlForPage', function _getUrlForPage(pagination, page) {
  var index = this._getIndex(pagination);
  var pData = this._dataCollection[index];
  var url = '';
  var tmp_page = 1;
  if (pData.nextPageUrl !== null) {
    url = pData.nextPageUrl;
    tmp_page = pData.currentPage + 1;
  } else if (pData.previousPageUrl !== null) {
    url = pData.previousPageUrl;
    tmp_page = pData.currentPage - 1;
  } else {
    throw new Error('Bunny Pagination: Server returned null for nextPageUrl and previousPageUrl');
  }
  return url.replace('page=' + tmp_page, 'page=' + page);
}), babelHelpers.defineProperty(_Pagination, 'redraw', function redraw(pagination) {
  this.removeItems(pagination);
  if (!this.hasPages(pagination)) {
    return false;
  }

  var isOuter = this.isOuter(pagination);
  var limit = this.getLimit(pagination);
  var lastPage = this.getLastPage(pagination);
  var currentPage = this.getCurrentPage(pagination);

  var f = document.createDocumentFragment();

  this.getData(pagination);

  if (isOuter) {
    f.appendChild(this.createFirstItem(pagination));
  }
  f.appendChild(this.createPrevItem(pagination));

  for (var k = 1; k <= lastPage; k++) {
    var half = Math.floor(limit / 2);
    var from = currentPage - half;
    var to = currentPage + half;
    if (currentPage < half) {
      to += half - currentPage;
    }
    if (lastPage - currentPage < half) {
      from -= half - (lastPage - currentPage) - 1;
    }
    if (from < k && k < to) {
      f.appendChild(this.createPageItem(pagination, k));
    }
  }

  f.appendChild(this.createNextItem(pagination));
  if (isOuter) {
    f.appendChild(this.createLastItem(pagination));
  }

  pagination.appendChild(f);

  return true;
}), babelHelpers.defineProperty(_Pagination, 'initOrUpdate', function initOrUpdate(pagination, data) {
  var urlParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var index = this._getIndex(pagination);
  if (index === false) {
    this._collection.push(pagination);
    this._dataCollection.push(this._getPaginationData(data, urlParams));
    this._callbacks.push([]);
  } else {
    this._dataCollection[index] = this._getPaginationData(data, urlParams);
    this._callbacks[index] = []; // clear callbacks
  }
  this.redraw(pagination);
  this._attachEventHandlers(pagination);
}), _Pagination);

